/* 
 * WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using WebApi;
using WebApi.Client;

namespace WebApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IWeatherForecastApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;WeatherForecast&gt;</returns>
        List<WeatherForecast> WeatherForecastGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;WeatherForecast&gt;</returns>
        ApiResponse<List<WeatherForecast>> WeatherForecastGetWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;WeatherForecast&gt;</returns>
        System.Threading.Tasks.Task<List<WeatherForecast>> WeatherForecastGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;WeatherForecast&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WeatherForecast>>> WeatherForecastGetAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class WeatherForecastApi : BaseApi, IWeatherForecastApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WeatherForecastApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WeatherForecastApi(String basePath) : base(basePath)
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WeatherForecastApi"/> class
        /// </summary>
        /// <returns></returns>
        public WeatherForecastApi() : base()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WeatherForecastApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WeatherForecastApi(WebApi.Client.Configuration configuration = null) : base(configuration)
        {

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;WeatherForecast&gt;</returns>
        public List<WeatherForecast> WeatherForecastGet ()
        {
             ApiResponse<List<WeatherForecast>> localVarResponse = WeatherForecastGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;WeatherForecast&gt;</returns>
        public ApiResponse<List<WeatherForecast>> WeatherForecastGetWithHttpInfo ()
        {

            return this.GetWithHttpInfo<List<WeatherForecast>>("/WeatherForecast");
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;WeatherForecast&gt;</returns>
        public async System.Threading.Tasks.Task<List<WeatherForecast>> WeatherForecastGetAsync ()
        {
             ApiResponse<List<WeatherForecast>> localVarResponse = await WeatherForecastGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;WeatherForecast&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WeatherForecast>>> WeatherForecastGetAsyncWithHttpInfo ()
        {

            return await this.GetWithHttpInfoAsync<List<WeatherForecast>>("/WeatherForecast");
        }
    }
}
